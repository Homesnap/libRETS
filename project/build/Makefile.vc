!include config.vc
!include version.mk

NMAKE = nmake /nologo
GMAKE = make

THIRD_PARTY_LIBS = static

########################################################################
#
# Release configuration
#
!if "$(BUILD)" == "release"

OPTIMIZE_FLAG = /O2
RTC_FLAG =
OBJDIR_BUILD = release
LINK_DEBUG_FLAG =

DEBUG_RUNTIME = 
LIB_DEBUG_RUNTIME = 

!else if "$(BUILD)" == "debug"

OPTIMIZE_FLAG = /Od
RTC_FLAG = /RTC1

!if "$(VS_VERSION)" == "vs2003"

RTC_FLAG = /GZ

!endif

OBJDIR_BUILD = debug
LINK_DEBUG_FLAG = /DEBUG

DEBUG_RUNTIME = d
LIB_DEBUG_RUNTIME = d

!else
!error "Unknown BUILD: $(BUILD)"
!endif

########################################################################
#
# Runtime Configuration
#
!if "$(RUNTIME_LIBS)" == "dynamic"

LIB_RUNTIME = 
LIB_RUNTIME = dynamic
LINK_LIB_FLAG = /lib
LIB_PREFIX = lib
LIB_EXT = lib
LINK_STD = $(WINLIBS)
OBJDIR_RUNTIME = 
OBJDIR_TYPE = -dynamic
RUNTIME_FLAGS = /MD$(DEBUG_RUNTIME)

!else if "$(RUNTIME_LIBS)" == "static"

LIB_RUNTIME = static
LINK_LIB_FLAG = /lib
LIB_PREFIX = lib
LIB_EXT = lib
OBJDIR_RUNTIME = -static
OBJDIR_TYPE = -static
RUNTIME_FLAGS = /MT$(DEBUG_RUNTIME)

!else if "$(RUNTIME_LIBS)" == "dll"
# This is not yet functional

OBJDIR_RUNTIME = -dll
LIB_RUNTIME = dynamic
LINK_LIB_FLAG = /dll
LIB_PREFIX = 
LIB_EXT = dll
OBJDIR_TYPE = -dll
RUNTIME_FLAGS = /LD$(DEBUG_RUNTIME) /MD$(DEBUG_RUNTIME)

!else
!error "Unknown RUNTIME_LIBS: $(RUNTIME_LIBS)"
!endif


CC = cl.exe
CXX = cl.exe

!if "$(VS_VERSION)" == "vs2003"

CFLAGS_STD = /nologo $(RUNTIME_FLAGS) $(OPTIMIZE_FLAG) /Gm /Zi \
	$(RTC_FLAG) /I. \
	/W3 /GX /YX /GR /c

MSVCP_DLL="$(VCTOOLS)\crt\src\build\intel\msvcp71.dll"
VC_VERSION = -vc71
WINLIBS = wsock32.lib winmm.lib wldap32.lib user32.lib gdi32.lib advapi32.lib

!else if "$(VS_VERSION)" == "vs2005"

CFLAGS_STD = /nologo $(RUNTIME_FLAGS) $(OPTIMIZE_FLAG) /Gm /Zi \
	$(RTC_FLAG) /I. \
	/W3 /EHsc /GR /c

MSVCP_DLL="$(VCTOOLS)\redist\x86\Microsoft.VC80.CRT\msvcp80.dll"
VC_VERSION = -vc80
WINLIBS = wsock32.lib winmm.lib wldap32.lib bufferoverflowu.lib user32.lib gdi32.lib advapi32.lib

!else if "$(VS_VERSION)" == "vs2008"

CFLAGS_STD = /nologo $(RUNTIME_FLAGS) $(OPTIMIZE_FLAG) /Gm /Zi \
	$(RTC_FLAG) /I. \
	/W3 /EHsc /GR /c

!if "$(TARGET_CPU)" == "x64"
MSVCP_DLL="$(VCTOOLS)\redist\amd64\Microsoft.VC90.CRT\msvcp90.dll"
MSVCR_DLL="$(VCTOOLS)\redist\amd64\Microsoft.VC90.CRT\msvcr90.dll"
!else
MSVCP_DLL="$(VCTOOLS)\redist\x86\Microsoft.VC90.CRT\msvcp90.dll"
MSVCR_DLL="$(VCTOOLS)\redist\x86\Microsoft.VC90.CRT\msvcr90.dll"
!endif

VC_VERSION = -vc90
WINLIBS = ws2_32.lib winmm.lib wldap32.lib user32.lib gdi32.lib advapi32.lib

!else if "$(VS_VERSION)" == "vs2010"

CFLAGS_STD = /nologo $(RUNTIME_FLAGS) $(OPTIMIZE_FLAG) /Gm /Zi \
	$(RTC_FLAG) /I. \
	/W3 /EHsc /GR /c

!if "$(TARGET_CPU)" == "x64"
MSVCP_DLL="C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\redist\x64\Microsoft.VC120.CRT\msvcp120.dll"
MSVCR_DLL="C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\redist\x64\Microsoft.VC120.CRT\msvcr120.dll"
!else
MSVCP_DLL="C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\redist\x86\Microsoft.VC140.CRT\msvcp140.dll"
MSVCR_DLL="C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\redist\x86\Microsoft.VC140.CRT\msvcr140.dll"
!endif

VC_VERSION = -vc100
WINLIBS = ws2_32.lib winmm.lib wldap32.lib user32.lib gdi32.lib advapi32.lib crypt32.lib normaliz.lib

!else if "$(VS_VERSION)" == "vs2015"

CFLAGS_STD = /nologo $(RUNTIME_FLAGS) $(OPTIMIZE_FLAG) /Gm /Zi \
	$(RTC_FLAG) /I. \
	/W3 /EHsc /GR /c

!if "$(TARGET_CPU)" == "x64"
MSVCP_DLL="C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\redist\x64\Microsoft.VC140.CRT\msvcp140.dll"
MSVCR_DLL="C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\redist\x64\Microsoft.VC140.CRT\vcruntime140.dll"
!else
MSVCP_DLL="C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\redist\x86\Microsoft.VC140.CRT\msvcp140.dll"
MSVCR_DLL="C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\redist\x86\Microsoft.VC140.CRT\vcruntime140.dll"
!endif

VC_VERSION = -vc140
WINLIBS = ws2_32.lib winmm.lib wldap32.lib user32.lib gdi32.lib advapi32.lib

!else if "$(VS_VERSION)" == "vs2017"

CFLAGS_STD = /nologo $(RUNTIME_FLAGS) $(OPTIMIZE_FLAG) /Zi \
	$(RTC_FLAG) /I. \
	/W3 /EHsc /GR /c

!if "$(TARGET_CPU)" == "x64"
MSVCP_DLL="C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Redist\MSVC\14.16.27012\x64\Microsoft.VC141.CRT\msvcp140.dll"
MSVCR_DLL="C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Redist\MSVC\14.16.27012\x64\Microsoft.VC141.CRT\vcruntime140.dll"
!else
MSVCP_DLL="C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Redist\MSVC\14.16.27012\x86\Microsoft.VC141.CRT\msvcp140.dll"
MSVCR_DLL="C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Redist\MSVC\14.16.27012\x86\Microsoft.VC141.CRT\vcruntime140.dll"
!endif

VC_VERSION = -vc141
WINLIBS = ws2_32.lib winmm.lib wldap32.lib user32.lib gdi32.lib advapi32.lib crypt32.lib Normaliz.lib

!endif

CSC = csc.exe /nologo
LINK_LIB = link.exe $(LINK_LIB_FLAG) /nologo
LINK_EXE = link.exe /nologo

EXTRA_DLL =


########################################################################
#
# libRETS specific configuration
#

LIBRETS_DEBUG  = 
LIBRETS_RUNTIME_PREFIX = 
LIBRETS_STATIC = 
LIBRETS_TS =

!if "$(BUILD)" == "debug"

LIBRETS_DEBUG = d
LIBRETS_RUNTIME_PREFIX = -

!endif

!if "$(RUNTIME_LIBS)" == "static"
LIBRETS_STATIC = s
LIBRETS_RUNTIME_PREFIX = -
!endif

!if "$(LIBRETS_THREADS)" == "/DLIBRETS_THREAD_SAFE"
LIBRETS_TS = -ts
!endif

BUILD_DIR = build-$(TARGET_CPU)
DIROBJ = $(BUILD_DIR)\$(BUILD)-$(RUNTIME_LIBS)$(LIBRETS_TS)

LIBRETS_LIB_NAME = $(LIB_PREFIX)librets-$(VS_VERSION)$(LIBRETS_TS)$(LIBRETS_RUNTIME_PREFIX)$(LIBRETS_STATIC)$(LIBRETS_DEBUG)-$(VERSION).$(LIB_EXT)

########################################################################
#
# Boost Configuration

BOOST_PATH = $(BASE_PATH)/boost_$(BOOST_VERSION)/boost
BOOST_CFLAGS = /I "$(BOOST_PATH)" /DBOOST_DISABLE_ASSERTS
BOOST_LDFLAGS = "/LIBPATH:$(BOOST_PATH)/stage/lib"
!if "$(VS_VERSION)" == "vs2008" || "$(VS_VERSION)" == "vs2010" || "$(VS_VERSION)" == "vs2015" || "$(VS_VERSION)" == "vs2017"
BOOST_CFLAGS = /I "$(BASE_PATH)/include/boost-$(BOOST_VERSION)" /DBOOST_DISABLE_ASSERTS
BOOST_LDFLAGS = "/LIBPATH:$(BASE_PATH)/lib"
!endif

########################################################################
#
# OpenSSL Configuration

OPENSSL_PATH = $(BASE_PATH)/openssl

#OPENSSL_LDFLAGS = "/LIBPATH:$(OPENSSL_PATH)/out32" ssleay32.lib libeay32.lib gdi32.lib advapi32.lib user32.lib
OPENSSL_LDFLAGS = "/LIBPATH:$(OPENSSL_PATH)/out32" ssleay32.lib libeay32.lib 
!if "$(VS_VERSION)" == "vs2008" || "$(VS_VERSION)" == "vs2010" || "$(VS_VERSION)" == "vs2015" || "$(VS_VERSION)" == "vs2017"
OPENSSL_LDFLAGS = "/LIBPATH:$(BASE_PATH)/lib" libssl.lib libcrypto.lib 
!endif

########################################################################
#
# Curl Configuration

CURL_PATH  = $(BASE_PATH)/curl

CURL_STATIC = /DCURL_STATICLIB

!if "$(RUNTIME_LIBS)" == "dynamic"
CURL_RUNTIME = _a
!else
CURL_RUNTIME = _a
!endif

!if "$(BUILD)" == "release"
CURL_DEBUG_RUNTIME = 
!else
CURL_DEBUG_RUNTIME = 
!endif

CURL_LIB = libcurl$(CURL_RUNTIME)$(CURL_DEBUG_RUNTIME).lib

CURL_CFLAGS = /I "$(CURL_PATH)/include" $(CURL_STATIC)
CURL_LDFLAGS = "/LIBPATH:$(CURL_PATH)/lib" $(CURL_LIB)

!if "$(VS_VERSION)" == "vs2008" || "$(VS_VERSION)" == "vs2010" || "$(VS_VERSION)" == "vs2015" || "$(VS_VERSION)" == "vs2017"
CURL_CFLAGS = /I "$(BASE_PATH)/include" $(CURL_STATIC)
CURL_LDFLAGS = "/LIBPATH:$(BASE_PATH)/lib" $(CURL_LIB)
!endif

#########################################################################
#
# Expat Configuration

EXPAT_PATH = $(BASE_PATH)/expat

!if "$(BUILD)" == "release"
EXPAT_BIN_PREFIX = release
!else
EXPAT_BIN_PREFIX = debug
!endif

!if "$(RUNTIME_LIBS)" == "dynamic"
EXPAT_RUNTIME = MT
!else
EXPAT_RUNTIME = MT
!endif

!if "$(BUILD)" == "release"
EXPAT_DEBUG_RUNTIME =
!else
EXPAT_DEBUG_RUNTIME = d
!endif

!if "$(THIRD_PARTY_LIBS)" == "static"
EXPAT_XML_STATIC = /DXML_STATIC
EXPAT_LIB_PREFIX = lib
!else if "$(THIRD_PARTY_LIBS)" == "dynamic"
EXPAT_XML_STATIC =
EXPAT_LIB_PREFIX = lib
!endif

!if "$(VS_VERSION)" == "vs2003"
EXPAT_CFLAGS = /I "$(EXPAT_PATH)/lib" $(EXPAT_XML_STATIC)
EXPAT_LDFLAGS = "/LIBPATH:$(EXPAT_PATH)/lib/lib" \
	$(EXPAT_LIB_PREFIX)expat$(EXPAT_RUNTIME)$(EXPAT_DEBUG_RUNTIME).lib

!else
EXPAT_CFLAGS = /I "$(BASE_PATH)/include" $(EXPAT_XML_STATIC)
# EXPAT_LDFLAGS = "/LIBPATH:$(BASE_PATH)/lib/$(EXPAT_BIN_PREFIX)" 
EXPAT_LDFLAGS = "/LIBPATH:$(BASE_PATH)/lib" \
	$(EXPAT_LIB_PREFIX)expat$(EXPAT_RUNTIME)$(EXPAT_DEBUG_RUNTIME).lib
!endif

########################################################################
#
# ANTLR Configuration

ANTLR_PATH = $(BASE_PATH)/antlr/install
!if "$(VS_VERSION)" == "vs2008" || "$(VS_VERSION)" == "vs2010" || "$(VS_VERSION)" == "vs2015" || "$(VS_VERSION)" == "vs2017"
ANTLR_PATH = $(BASE_PATH)
!endif

!if "$(RUNTIME_LIBS)" == "dynamic"
ANTLR_RUNTIME = 
!else
ANTLR_RUNTIME = mt
!endif

!if "$(BUILD)" == "release"
ANTLR_DEBUG_RUNTIME = 
!else
ANTLR_DEBUG_RUNTIME = d
!endif

ANTLR = java -classpath C:\libRETS\vendorsrc\antlr\current\antlr.jar antlr.Tool
ANTLR_CFLAGS = /I "$(ANTLR_PATH)/include"
ANTLR_LDFLAGS = "/LIBPATH:$(ANTLR_PATH)/lib" \
	antlr$(ANTLR_RUNTIME)$(ANTLR_DEBUG_RUNTIME).lib

########################################################################
#
# CppUnit Configuration

CPPUNIT_PATH = $(BASE_PATH)/cppunit
CPPUNIT_LIB = cppunit.lib
CPPUNIT_CFLAGS = /I "$(CPPUNIT_PATH)/include"
CPPUNIT_LDFLAGS = "/LIBPATH:$(CPPUNIT_PATH)/lib" $(CPPUNIT_LIB)

!if "$(VS_VERSION)" == "vs2008" || "$(VS_VERSION)" == "vs2010" || "$(VS_VERSION)" == "vs2015" || "$(VS_VERSION)" == "vs2017"
CPPUNIT_CFLAGS = /I "$(BASE_PATH)/include"
CPPUNIT_LDFLAGS = "/LIBPATH:$(BASE_PATH)/lib" $(CPPUNIT_LIB)
!endif

########################################################################
#
# Swig Configuration

#!if "$(SWIG_PATH)" == ""
#SWIG_PATH = $(BASE_PATH)\swig
#!endif
#!if "$(VS_VERSION)" == "vs2008" || "$(VS_VERSION)" == "vs2010" || "$(VS_VERSION)" == "vs2015" || "$(VS_VERSION)" == "vs2017"
#SWIG_PATH = $(BASE_PATH)\bin
#!endif
!if "$(SWIG)" == ""
SWIG = $(BASE_PATH)\bin\swig.exe 
!endif

########################################################################
#
# PHP Configuration

!if "$(VS_VERSION)" == "vs2008" || "$(VS_VERSION)" == "vs2010" || "$(VS_VERSION)" == "vs2015" || "$(VS_VERSION)" == "vs2017"
PHP_PATH = $(BASE_PATH)/include/php
!if "$(TARGET_CPU)" == "x86"
PHP_TIME_T=/D_USE_32BIT_TIME_T
!elseif "$(TARGET_CPU)" == "x64"
PHP_TIME_T=
!endif
#
#PHP_CFLAGS = /I$(PHP_PATH) /I$(PHP_PATH)/TSRM /I$(PHP_PATH)/Zend /I$(PHP_PATH)/main \
#	/DPHP_WIN32 /DWIN32 /DZEND_WIN32 /DZTS=0 /DZEND_DEBUG=0 $(PHP_TIME_T)
#PHP_LIBS = $(BASE_PATH)/lib/php5.lib
#!if "$(LIBRETS_TS)" == "-DLIBRETS_THREAD_SAFE"
PHP_CFLAGS = /I$(PHP_PATH) /I$(PHP_PATH)/TSRM /I$(PHP_PATH)/Zend /I$(PHP_PATH)/main \
	/DPHP_WIN32 /DWIN32 /DZEND_WIN32 /DZTS=1 /DZEND_DEBUG=0 $(PHP_TIME_T)
PHP_LIBS = $(BASE_PATH)/lib/php5ts.lib
#!endif
!endif
!if "$(PHP_PATH)" == ""
PHP_PATH = $(BASE_PATH)/php
!endif
!if "$(PHP_CFLAGS)" == ""
PHP_CFLAGS = /I$(PHP_PATH) /I$(PHP_PATH)/TSRM /I$(PHP_PATH)/Zend /I$(PHP_PATH)/main \
	/DPHP_WIN32 /DWIN32 /DZEND_WIN32 /DZTS=1 /DZEND_DEBUG=0 
!endif
!if "$(PHPWIN_PATH)" == ""
PHPWIN_PATH = $(BASE_PATH)/phpwin
!endif
!if "$(PHP_LIBS)" == ""
PHP_LIBS = $(PHPWIN_PATH)/dev/php5ts.lib
!endif

########################################################################
#
# Perl Configuration

!if "$(VS_VERSION)" == "vs2008" || "$(VS_VERSION)" == "vs2010" || "$(VS_VERSION)" == "vs2015" || "$(VS_VERSION)" == "vs2017"

PERL_PATH = $(BASE_PATH)/perl
PERL_CFLAGS = /DWIN32 /D_CONSOLE /DNO_STRICT /I../../librets/include $(CFLAGS_STD) \
        $(BOOST_CFLAGS) 
PERL_LIB_EXT = $(LIB_EXT)
PERL_LIBS = $(WINLIBS) libcpmt.lib

# Another kludge for Perl.
!if "$(TYPE)" == "static"
PERL_LIB_EXT = lib
!else if "$(TYPE)" == "dynamic"
PERL_LIB_EXT = dll
!endif
!endif

########################################################################
#
# Python Configuration
!ifndef LIBPATH
PYTHON_LIBPATH = $(BASE_PATH)/lib
!else
PYTHON_LIBPATH = $(LIBPATH)
!endif
